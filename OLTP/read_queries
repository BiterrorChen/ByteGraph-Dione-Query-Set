// Query outgoing edges of the vertex with specified id and type, sort by p3, 
// and take top 10 edges
1. g.V().has("id", id).has("type", type)
        .outE(TYPE)
        .order().by(p3)
   .limit(10)

// Query outgoing edges of the vertex with specified id and type, filter edges 
// where the other vertex has the specified id and type
2. g.V().has("id", id).has("type", type)
        .outE(TYPE)
        .where(otherV().has("id", id).has("type", type))

// Query outgoing edges of the vertex with specified id and type, 
// return p0, p1, p2 properties of edges, 
// and filter edges where the other vertex has the specified id and type
3. g.V().has("id", id).has("type", type)
        .outE(TYPE)
        .withProperties("p0", "p1", "p2")
        .where(otherV().has("id", id).has("type", type))

// Query outgoing edges of the vertex with specified id and type, 
// and return p0, p1, p2 properties of the edges
4. g.V().has("id", id).has("type", type)
        .outE(TYPE)
        .withProperties("p0", "p1", "p2")

// Query outgoing edges of the vertex with specified id and type, 
// return p0, p1, p2 properties of edges, and sort by p3
5. g.V().has("id", id).has("type", type)
        .outE(TYPE)
        .withProperties("p0", "p1", "p2")
        .order().by(p3)

// Query outgoing vertices of the vertex with specified id and type, 
// filter vertices that have the specified id and type
6. g.V().has("id", id).has("type", type)
        .out(TYPE)
        .has("id", id).has("type", type)

// Query outgoing vertices of the vertex with specified id and type, 
// return p0, p1, p2 properties of vertices, and filter vertices that have the specified id and type
7. g.V().has("id", id).has("type", type)
        .out(TYPE)
        .withProperties("p0", "p1", "p2")
        .has("id", id).has("type", type)

// Query outgoing vertices of the vertex with specified id and type, 
// and return p0, p1, p2 properties of the vertices
8. g.V().has("id", id).has("type", type)
        .out(TYPE)
        .withProperties("p0", "p1", "p2")

// Query outgoing vertices of the vertex with specified id and type, 
// return p0, p1, p2 properties of vertices, and sort by p3
9. g.V().has("id", id).has("type", type)
        .out(TYPE)
        .withProperties("p0", "p1", "p2")
        .order().by(p3)
